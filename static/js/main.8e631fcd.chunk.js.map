{"version":3,"sources":["ForecastSelector.tsx","SearchBar.tsx","WeatherMap.tsx","WeatherForecast.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ForecastSelector","state","marks","label","time","value","forecast","this","props","updateSelector","prevProps","forEach","item","index","MAX_FORECAST_ENTRIES","date","Date","dt","hours","getHours","dayToString","getDay","toString","push","setState","day","evt","newValue","setForecastSelection","classes","className","root","Slider","defaultValue","step","min","max","valueLabelFormat","valueLabelDisplay","onChange","handleChange","React","Component","withStyles","theme","createStyles","paddingLeft","spacing","paddingRight","paddingTop","SearchBar","searchLocation","target","preventDefault","lookupLocation","pos","lookupCurrentWeather","lat","lng","current","lookupWeatherForecast","concat","setLocationAndForecast","console","error","url","URL","LOCATION_SEARCH_URL","params","q","format","limit","Object","keys","key","searchParams","append","fetch","resp","json","data","length","result","lon","Error","CURRENT_WEATHER_URL","appid","FORECAST_API_KEY","cod","FORECAST_URL","list","width","showIconButton","isWidthDown","searchForm","noValidate","TextField","locationField","id","handleLocationChange","IconButton","aria-label","type","onClick","handleSearch","Icon","Button","variant","endIcon","padding","display","flex","withWidth","WeatherMap","zoom","mapRef","createRef","targetPos","prevTargetPos","Map","map","center","ref","TileLayer","attribution","Marker","position","Popup","height","breakpoints","down","WeatherForecast","valid","icon","temp","pressure","tempCelsius","forecastSelection","updateForecast","forecastItem","weather","main","weatherIconPath","WEATHER_ICON_URL","tempConverted","tempUnits","weatherIcon","style","backgroundImage","tempPressure","Box","ButtonGroup","color","handleSelectCelsius","handleSelectFahrenheit","tempSelector","flexDirection","float","backgroundPosition","backgroundRepeat","backgroundSize","justifyContent","fontSize","App","firstLookupDone","CssBaseline","Container","component","maxWidth","Paper","topLevelLayout","desktopWeatherBox","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8e631fcd.chunk.js","sourcesContent":["/*\n * Component that allows the user to select whether they want to see the current\n * weather conditions or the forecast for a future date\n */\nimport React from 'react';\n\nimport {\n    createStyles,\n    withStyles,\n    Slider,\n    Theme,\n    WithStyles\n} from '@material-ui/core';\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        paddingLeft: theme.spacing(4),\n        paddingRight: theme.spacing(4),\n        paddingTop: theme.spacing(5.5)\n    }\n});\n\ntype Mark = {\n    label: string,  // displayed on the slider\n    time: string,   // displayed on the marker above the currently selected\n                    // slider entry\n    value: number   // index of the mark in the array\n}\n\ninterface Props extends WithStyles<typeof styles> {\n    // Array of weather forecasts (time-ordered; ascending) where the first\n    // entry is the current weather\n    forecast: Array<any>,\n\n    // Inform parent that the index of the currently selected forecast has been\n    // updated\n    setForecastSelection: (forecastSelection: number) => void\n}\ninterface State {\n    // Marks along the slider (potentially labelled)\n    marks: Mark[];\n}\n\nclass ForecastSelector extends React.Component<Props, State> {\n    // Number of weather forecast entries (including the \"Now\" entry) to show\n    // on the slider\n    private static MAX_FORECAST_ENTRIES = 32;\n\n    public readonly state: Readonly<State> = {\n        marks: [\n            {\n                label: \"\",\n                time: \"\",\n                value: 0\n            }\n        ]\n    };\n\n    // Set the initial slider values from the component props\n    componentDidMount() {\n        const forecast = this.props.forecast;\n        this.updateSelector(forecast);\n    }\n\n    // When the forecast provided by the props changes, update the slider values\n    // to match\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.forecast !== this.props.forecast) {\n            const forecast = this.props.forecast;\n            this.updateSelector(forecast);\n        }\n    }\n\n    // Update the slider values based on the passed forecast data\n    private updateSelector(forecast: Array<any>) {\n        // Generate an array of slider marks to match the first\n        // MAX_FORECAST_ENTRIES forecasts\n        const marks: Mark[] = [];\n        forecast.forEach((item, index) => {\n            if (index < ForecastSelector.MAX_FORECAST_ENTRIES) {\n                const date = new Date(item.dt * 1000);\n                const hours = date.getHours();\n                const label = index <= 0\n                    ? \"\"\n                    : (hours === 0\n                        ? this.dayToString(date.getDay())\n                        : \"\");\n                const time = (hours >= 10 ? hours.toString() : \"0\" + hours) + \":00\";\n                marks.push({\n                    label: label,\n                    time: time,\n                    value: index\n                });\n            }\n        });\n        this.setState({\n            marks: marks\n        })\n    }\n\n    // Convert JS numeric day value (0-7) to a text equivalent\n    private dayToString(day: number): string {\n        switch(day) {\n            case 0: return \"Sun\";\n            case 1: return \"Mon\";\n            case 2: return \"Tue\";\n            case 3: return \"Wed\";\n            case 4: return \"Thu\";\n            case 5: return \"Fri\";\n            case 6: return \"Sat\";\n            default: return \"???\"\n        }\n    }\n\n    // Format the label on the marker above the slider (the marker that\n    // indicates the currently selected entry on the slider)\n    private valueLabelFormat(value: number): JSX.Element {\n        if (value <= 0) {\n            return (<span>Now</span>)\n        } else {\n            return (<span>{this.state.marks[value].time}</span>);\n        }\n    }\n\n    // Slider value (forecast selection) has been changed by the user, so\n    // inform other components via the props\n    private handleChange(evt: any, newValue: number | number[]) {\n        this.props.setForecastSelection(newValue as number);\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { marks } = this.state;\n\n        return (\n            <div className={classes.root}>\n                <Slider\n                  defaultValue={0}\n                  step={1}\n                  min={0}\n                  max={31}\n                  valueLabelFormat={\n                    (value: number): JSX.Element => {\n                        return this.valueLabelFormat(value);\n                    }}\n                  valueLabelDisplay=\"on\"\n                  marks={marks}\n                  onChange={(evt, newValue) => { this.handleChange(evt, newValue); }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(ForecastSelector);\n","/*\n * Search bar component that allows the user to search for a location they\n * specify\n */\nimport React from 'react';\n\nimport {\n    createStyles,\n    withStyles,\n    Button,\n    Icon,\n    IconButton,\n    TextField,\n    Theme,\n    WithStyles\n} from '@material-ui/core';\nimport withWidth, { isWidthDown, WithWidth } from '@material-ui/core/withWidth';\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        padding: theme.spacing(2)\n    },\n    searchForm: {\n        display: \"flex\"\n    },\n    locationField: {\n        flex: 1,\n        paddingRight: theme.spacing(1)\n    }\n});\n\ninterface Props extends WithStyles<typeof styles>, WithWidth {\n    // Inform parent that the forecast and forecast location have been updated\n    setLocationAndForecast: (lat: number, lng: number, forecast: Array<any>) => void\n}\ninterface State {\n    // Value currently displayed in the search location text input field\n    searchLocation: string;\n}\n\nclass SearchBar extends React.Component<Props, State> {\n    // URL for the API for finding the coordinates of a specified location\n    private static LOCATION_SEARCH_URL = \"https://nominatim.openstreetmap.org/search\";\n\n    // URL for the API for getting the current weather conditions\n    private static CURRENT_WEATHER_URL = \"https://api.openweathermap.org/data/2.5/weather\";\n\n    // URL for the API for getting the weather forecast\n    private static FORECAST_URL = \"https://api.openweathermap.org/data/2.5/forecast\";\n\n    // API key for OpenWeatherMap; required to fetch weather day\n    private static FORECAST_API_KEY = \"693943cf1c26beecbba5cbe6ec6e21fc\";\n\n    public readonly state: Readonly<State> = {\n        searchLocation: \"\"\n    }\n\n    // When the user changes the contents of the search location text input\n    // field, update the state so the changes reflect in the GUI\n    private handleLocationChange(evt: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\n        this.setState({\n            searchLocation: evt.target.value\n        });\n    }\n\n    // User has requested a search (either by pressing Return when focused on\n    // the search location text input field, or by clicking the \"Search\"\n    // button), so send a REST query to the location service to find the\n    // location indicated by the user.  If the request is successful\n    // then we will get the latitude and longitude of the location, which we can\n    // then include in a  REST query to the weather forecast service.  We can\n    // then pass the result of both queries to the parent which can pass the\n    // results on to any other components which need them.\n    private async handleSearch(evt: React.MouseEvent<HTMLButtonElement>) {\n        evt.preventDefault();   // Stop the default \"submit\" button behaviour\n                                // (which will refresh the page)\n\n        const searchLocation = this.state.searchLocation;\n        if (!searchLocation) return null;\n\n        try {\n            const pos = await this.lookupLocation(searchLocation);\n            const current = await this.lookupCurrentWeather(pos.lat, pos.lng);\n            const forecast = current.concat(await this.lookupWeatherForecast(pos.lat, pos.lng));\n\n            // Pass results to the parent component\n            this.props.setLocationAndForecast(pos.lat, pos.lng, forecast);\n        } catch(err) {\n            // REVISIT: Flag an error to the user when location or forecast not found\n            console.error(err);\n        }\n    }\n\n    // Send a REST query to find the coordinates of the current location\n    // specifed by the user\n    private async lookupLocation(searchLocation: string): Promise<{lat: number, lng: number}> {\n        const url = new URL(SearchBar.LOCATION_SEARCH_URL);\n        const params: any = {\n            q: this.state.searchLocation,\n            format: \"json\",\n            limit: 1\n        };\n        Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\n        const resp = await fetch(url.toString());\n        const data = await resp.json();\n        if (data && data.length >= 1) {\n            const result = data[0];\n            const lat: number = result.lat;\n            const lng: number = result.lon;\n\n            return {lat: lat, lng: lng};\n        }\n        throw new Error(\"Location lookup failed\");\n    }\n\n    // Send a REST query to find the current weather for a location specified\n    // by coordinates\n    private async lookupCurrentWeather(lat: number, lng: number): Promise<Array<any>> {\n        const url = new URL(SearchBar.CURRENT_WEATHER_URL);\n        const params: any = {\n            appid: SearchBar.FORECAST_API_KEY,\n            lat: lat,\n            lon: lng\n        };\n        Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\n        const resp = await fetch(url.toString());\n        const data = await resp.json();\n        if (data && data.cod === 200) {\n            return [data];\n        }\n        throw new Error(\"Forecast lookup failed\");\n    }\n\n    // Send a REST query to find the weather forecast for a location specified\n    // by coordinates\n    private async lookupWeatherForecast(lat: number, lng: number): Promise<Array<any>> {\n        const url = new URL(SearchBar.FORECAST_URL);\n        const params: any = {\n            appid: SearchBar.FORECAST_API_KEY,\n            lat: lat,\n            lon: lng\n        };\n        Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\n        const resp = await fetch(url.toString());\n        const data = await resp.json();\n        if (data && data.cod === \"200\" && data.list) {\n            return data.list;\n        }\n        throw new Error(\"Forecast lookup failed\");\n    }\n\n    render() {\n        const { classes, width } = this.props;\n        const { searchLocation } = this.state;\n\n        const showIconButton = isWidthDown('xs', width);\n\n        return (\n            <div className={classes.root}>\n                <form className={classes.searchForm} noValidate>\n                    <TextField\n                      className={classes.locationField}\n                      id=\"weather-location\"\n                      label=\"Location\"\n                      value={searchLocation}\n                      onChange={(evt) => { this.handleLocationChange(evt); }}\n                    />\n                    { showIconButton ? (\n                        <IconButton\n                          aria-label=\"search\"\n                          type=\"submit\"\n                          onClick={(evt) => { this.handleSearch(evt); }}\n                          >\n                            <Icon>search</Icon>\n                        </IconButton>) : (\n                        <Button\n                          type=\"submit\"\n                          variant=\"contained\"\n                          endIcon={<Icon>search</Icon>}\n                          onClick={(evt) => { this.handleSearch(evt); }}\n                        >\n                            Search\n                        </Button>\n                    )}\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(withWidth()(SearchBar));\n","/*\n * Component that displays a map indicating the location that the weather\n * forecast is for\n */\nimport React from 'react';\n\nimport {\n    createStyles,\n    withStyles,\n    Theme,\n    WithStyles\n} from '@material-ui/core';\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet';\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        flex: 1\n    },\n    map: {\n        height: \"500px\",\n        [theme.breakpoints.down('xs')]: {\n            height: \"300px\"\n        }\n    }\n});\n\ninterface Props extends WithStyles<typeof styles> {\n    // Weather forecast location\n    targetPos: {\n        lat: number,\n        lng: number\n    }\n}\ninterface State {\n    // Current map location and zoom level\n    pos: {\n        lat: number,\n        lng: number\n    },\n    zoom: number\n}\n\nclass WeatherMap extends React.Component<Props, State> {\n    public readonly state: Readonly<State> = {\n        pos: {\n            lat: 0.0,\n            lng: 0.0\n        },\n        zoom: 0\n    }\n\n    mapRef = React.createRef<Map>();\n\n    // Set the initial displayed location from the component props\n    componentDidMount() {\n        const targetPos = this.props.targetPos;\n        this.setState({\n            pos: {\n                lat: targetPos.lat,\n                lng: targetPos.lng\n            },\n            zoom: 13\n        });\n    }\n\n    // When the weather forecast location changes, move the map to center on\n    // the new location.  We track target position separately from current map\n    // position so the user can still move around the map\n    componentDidUpdate(prevProps: Props) {\n        const targetPos = this.props.targetPos;\n        const prevTargetPos = prevProps.targetPos;\n        const posChanged = (targetPos.lat !== prevTargetPos.lat\n                            || targetPos.lng !== prevTargetPos.lng);\n        if (posChanged) {\n            this.setState({\n                pos: {\n                    lat: targetPos.lat,\n                    lng: targetPos.lng\n                },\n                zoom: 13\n            });\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { pos, zoom } = this.state;\n\n        return (\n            <div className={classes.root}>\n                <Map\n                  className={classes.map}\n                  center={pos}\n                  zoom={zoom}\n                  ref={this.mapRef}>\n                    <TileLayer\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n                    />\n                    <Marker position={pos}>\n                        <Popup>A pretty CSS3 popup.<br />Easily customizable.</Popup>\n                    </Marker>\n                </Map>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(WeatherMap);\n","/*\n * Component that displays a summary of the current or forecasted weather\n * conditions for the current selected location\n */\nimport React from 'react';\n\nimport {\n    createStyles,\n    withStyles,\n    Button,\n    ButtonGroup,\n    Box,\n    Theme,\n    WithStyles\n} from '@material-ui/core';\nimport withWidth, { isWidthDown, WithWidth } from '@material-ui/core/withWidth';\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        flex: 1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        [theme.breakpoints.down('xs')]: {\n            flexDirection: \"row\"\n        }\n    },\n    tempSelector: {\n        float: \"left\",\n        paddingLeft: theme.spacing(2)\n    },\n    weatherIcon: {\n        flex: 1,\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"contain\"\n    },\n    tempPressure: {\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        padding: theme.spacing(2),\n        fontSize: \"4rem\",\n        [theme.breakpoints.down('md')]: {\n            fontSize: \"3rem\"\n        },\n        [theme.breakpoints.down('sm')]: {\n            fontSize: \"2rem\"\n        },\n        [theme.breakpoints.down('xs')]: {\n            flex: 1,\n            flexDirection: \"column\"\n        }\n    }\n});\n\ninterface Props extends WithStyles<typeof styles>, WithWidth {\n    // Array of weather forecasts (time-ordered; ascending) where the first\n    // entry is the current weather\n    forecast: Array<any>,\n\n    // Index (in the forecast array) of the forecast to display\n    forecastSelection: number\n}\ninterface State {\n    valid: boolean,       // forecast is valid\n    icon: string,         // name of icon summarising the conditions\n    temp: number,         // temperature in Kelvin\n    pressure: number,     // pressure in mB,\n    tempCelsius: boolean  // true for celsius, false for fahrenheit\n}\n\nclass WeatherForecast extends React.Component<Props, State> {\n    public static WEATHER_ICON_URL = \"https://openweathermap.org/img/wn/\";\n\n    public readonly state: Readonly<State> = {\n        valid: false,\n        icon: \"\",\n        temp: 0,\n        pressure: 0,\n        tempCelsius: true\n    }\n\n    // Set the initial displayed forecast from the component props\n    componentDidMount() {\n        const forecast = this.props.forecast;\n        const forecastSelection = this.props.forecastSelection;\n        this.updateForecast(forecast, forecastSelection);\n    }\n\n    // When the forecast provided by the props changes, update the displayed\n    // forecast to match\n    componentDidUpdate(prevProps: Props) {\n        const propsChanged = (\n            prevProps.forecast !== this.props.forecast\n            || prevProps.forecastSelection !== this.props.forecastSelection);\n        if (propsChanged) {\n            const forecast = this.props.forecast;\n            const forecastSelection = this.props.forecastSelection;\n            this.updateForecast(forecast, forecastSelection);\n        }\n    }\n\n    // Update the displayed forecast based on the passed forecast data\n    private updateForecast(forecast: Array<any>, forecastSelection: number) {\n        if (forecast.length > 0) {\n            const forecastItem = forecast[forecastSelection];\n            const icon = forecastItem.weather[0].icon;\n            const temp = forecastItem.main.temp;\n            const pressure = forecastItem.main.pressure;\n            const valid = true;\n            this.setState({\n                valid, icon, temp, pressure\n            })\n        }\n    }\n\n    // Select temperature conversion algorithm\n    private handleSelectCelsius() {\n        this.setState({\n            tempCelsius: true\n        });\n    }\n    private handleSelectFahrenheit() {\n        this.setState({\n            tempCelsius: false\n        });\n    }\n\n    render() {\n        const { classes, width } = this.props;\n        const { valid, icon, temp, tempCelsius, pressure } = this.state;\n\n        // URL to an icon that represents the weather conditions\n        const weatherIconPath = WeatherForecast.WEATHER_ICON_URL + icon + \"@2x.png\";\n\n        // Convert temperature to Celsius/Fahrenheit (from Kelvin)\n        const tempConverted = tempCelsius ? ~~(temp - 273.15)\n                                          : ~~(((temp-273.15)*1.8)+32);\n        const tempUnits = tempCelsius ? \"°C\" : \"°F\";\n\n        // For mobile screen sizes, use a different layout\n        if (isWidthDown('xs', width)) {\n            return (\n                <div className={classes.root}>\n                    { valid ?\n                        <>\n                            <div className={classes.weatherIcon} style={{backgroundImage: 'url(\"' + weatherIconPath + '\")'}}>\n                            </div>\n                            <div className={classes.tempPressure}>\n                                <Box>\n                                    {tempConverted}{tempUnits}\n                                </Box>\n                                <Box>\n                                    {pressure}mB\n                                </Box>\n                                <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n                                    <Button onClick={() => { this.handleSelectCelsius(); }}>°C</Button>\n                                    <Button onClick={() => { this.handleSelectFahrenheit(); }}>°F</Button>\n                                </ButtonGroup>\n                            </div>\n                        </> : null}\n                </div>\n            );\n        } else {\n            // Full-size layout\n            return (\n                <div className={classes.root}>\n                    { valid ?\n                        <>\n                            <div className={classes.tempSelector}>\n                                <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n                                    <Button onClick={() => { this.handleSelectCelsius(); }}>°C</Button>\n                                    <Button onClick={() => { this.handleSelectFahrenheit(); }}>°F</Button>\n                                </ButtonGroup>\n                            </div>\n                            <div className={classes.weatherIcon} style={{backgroundImage: 'url(\"' + weatherIconPath + '\")'}}>\n                            </div>\n                            <div className={classes.tempPressure}>\n                                <Box>\n                                    {tempConverted}{tempUnits}\n                                </Box>\n                                <Box>\n                                    {pressure}mB\n                                </Box>\n                            </div>\n                        </> : null}\n                </div>\n            );\n        }\n    }\n}\n\nexport default withStyles(styles)(withWidth()(WeatherForecast));\n","/*\n * Main web app component\n *\n * Instantiates and links together the components that:\n * - let the user search for a location\n * - display the location on a map\n * - display the weather forecast\n * - let the user choose which day to display the forecast for\n */\nimport React from 'react';\n\nimport {\n    createStyles,\n    withStyles,\n    Container,\n    CssBaseline,\n    Paper,\n    Theme,\n    WithStyles\n} from '@material-ui/core';\nimport withWidth, { isWidthDown, WithWidth } from '@material-ui/core/withWidth';\n\nimport ForecastSelector from './ForecastSelector';\nimport SearchBar from './SearchBar';\nimport WeatherMap from './WeatherMap';\nimport WeatherForecast from './WeatherForecast';\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        padding: theme.spacing(2)\n    },\n    topLevelLayout: {\n        display: \"flex\",\n        flexDirection: \"column\"\n    },\n    desktopWeatherBox: {\n        display: \"flex\"\n    }\n});\n\ninterface Props extends WithStyles<typeof styles>, WithWidth {\n}\ninterface State {\n    // Weather forecast location\n    targetPos: {\n        lat: number,\n        lng: number\n    },\n\n    // Array of weather forecasts (time-ordered; ascending) where the first\n    // entry is the current weather\n    forecast: Array<any>,\n    \n    // Index (in the forecast array) of the forecast to display\n    forecastSelection: number,\n\n    // Set to true when the first lookup of location and weather forecast has\n    // completed successfully\n    firstLookupDone: boolean\n}\n\nclass App extends React.Component<Props, State> {\n    public readonly state: Readonly<State> = {\n        targetPos: {\n            lat: 0.0,\n            lng: 0.0\n        },\n        forecast: [],\n        forecastSelection: 0,\n        firstLookupDone: false\n    };\n\n    //constructor(props: Props) {\n    //    super(props);\n    //}\n\n    private setLocationAndForecast(lat: number, lng: number, forecast: Array<any>) {\n        this.setState({\n            targetPos: {\n                lat: lat,\n                lng: lng\n            },\n            forecast: forecast,\n            firstLookupDone: true\n        });\n    }\n    private setForecastSelection(forecastSelection: number): void {\n        this.setState({\n            forecastSelection: forecastSelection\n        });\n    }\n    \n    render() {\n        const { classes, width } = this.props;\n        const { firstLookupDone, forecast, forecastSelection,\n                targetPos } = this.state;\n\n        // For mobile screen sizes, use a different layout\n        if (isWidthDown('xs', width)) {\n            return (\n                <div className={classes.root}>\n                    <CssBaseline />\n                    <Container component=\"main\" maxWidth=\"lg\">\n                        <Paper>\n                            <div className={classes.topLevelLayout}>\n                                <SearchBar\n                                  setLocationAndForecast={\n                                    (lat, lng, forecast) => {\n                                        this.setLocationAndForecast(lat, lng, forecast); }}\n                                >\n                                </SearchBar>\n                                { firstLookupDone ?\n                                    <>\n                                        <WeatherForecast\n                                            forecast={forecast}\n                                            forecastSelection={forecastSelection}>\n                                        </WeatherForecast>\n                                        <ForecastSelector\n                                          forecast={forecast}\n                                          setForecastSelection={\n                                            (index) => { this.setForecastSelection(index); }}\n                                        >\n                                        </ForecastSelector>\n                                        <WeatherMap\n                                          targetPos={targetPos}\n                                        >\n                                        </WeatherMap>\n                                    </>\n                                : null}\n                            </div>\n                        </Paper>\n                    </Container>\n                </div>\n            );\n        } else {\n            // Full-size layout\n            return (\n                <div className={classes.root}>\n                    <CssBaseline />\n                    <Container component=\"main\" maxWidth=\"lg\">\n                        <Paper>\n                            <div className={classes.topLevelLayout}>\n                                <SearchBar\n                                  setLocationAndForecast={\n                                    (lat, lng, forecast) => {\n                                        this.setLocationAndForecast(lat, lng, forecast); }}\n                                >\n                                </SearchBar>\n                                { firstLookupDone ?\n                                    <>\n                                        <div className={classes.desktopWeatherBox}>\n                                            <WeatherMap\n                                              targetPos={targetPos}\n                                            >\n                                            </WeatherMap>\n                                            <WeatherForecast\n                                              forecast={forecast}\n                                              forecastSelection={forecastSelection}>\n                                            </WeatherForecast>\n                                        </div>\n                                        <ForecastSelector\n                                          forecast={forecast}\n                                          setForecastSelection={\n                                            (index) => { this.setForecastSelection(index); }}\n                                        >\n                                        </ForecastSelector>\n                                    </>\n                                : null}\n                            </div>\n                        </Paper>\n                    </Container>\n                </div>\n            );\n        }\n    }\n}\n\nexport default withStyles(styles)(withWidth()(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*\n * Web app top-level\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'leaflet/dist/leaflet.css';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}